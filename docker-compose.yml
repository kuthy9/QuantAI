version: '3.8'

services:
  # Main QuantAI Application
  quantai-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantai-app
    environment:
      - QUANTAI_ENV=${QUANTAI_ENV:-production}
      - DATABASE_URL=postgresql://quantai:quantai@postgres:5432/quantai
      - REDIS_URL=redis://redis:6379/0
      - CHROMA_PERSIST_DIRECTORY=/app/data/memory
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - TRADING_MODE=${TRADING_MODE:-paper}
      - IBKR_HOST=${IBKR_HOST:-127.0.0.1}
      - IBKR_PORT=${IBKR_PORT:-7497}
      - IBKR_CLIENT_ID=${IBKR_CLIENT_ID:-1}
      - IBKR_ACCOUNT=${IBKR_ACCOUNT:-DUA559603}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8000:8000"  # API server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      chroma:
        condition: service_started
    restart: unless-stopped
    networks:
      - quantai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Dashboard
  quantai-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: quantai-dashboard
    environment:
      - QUANTAI_API_URL=http://quantai-app:8000
    ports:
      - "8501:8501"  # Streamlit dashboard
    depends_on:
      - quantai-app
    restart: unless-stopped
    networks:
      - quantai-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: quantai-postgres
    environment:
      - POSTGRES_DB=quantai
      - POSTGRES_USER=quantai
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-quantai}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - quantai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quantai -d quantai"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: quantai-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - quantai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ChromaDB Vector Database
  chroma:
    image: chromadb/chroma:latest
    container_name: quantai-chroma
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8000"  # ChromaDB API
    restart: unless-stopped
    networks:
      - quantai-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: quantai-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - quantai-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: quantai-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - quantai-network

  # Nginx Reverse Proxy with Load Balancing
  nginx:
    image: nginx:alpine
    container_name: quantai-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - quantai-app
      - quantai-dashboard
      - grafana
    restart: unless-stopped
    networks:
      - quantai-network

  # Failover Monitor Service
  quantai-failover:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: quantai-failover
    environment:
      - QUANTAI_ENV=${QUANTAI_ENV:-production}
      - QUANTAI_ROLE=failover_monitor
      - MONITOR_INTERVAL=30
      - FAILOVER_THRESHOLD=3
    volumes:
      - ./logs:/app/logs
      - ./config:/app/config
    command: ["python", "-m", "quantai.monitoring.failover_monitor"]
    depends_on:
      - quantai-app
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - quantai-network
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 60s
      timeout: 10s
      retries: 2

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  prometheus_data:
  grafana_data:

networks:
  quantai-network:
    driver: bridge
